{"version":3,"sources":["components/Common/FormControls/FormControls.module.css","components/Common/FormControls/FormControls.js","utils/validator/validators.js","Login/Login.module.css","Login/Login.jsx"],"names":["module","exports","FormControl","Element","input","meta","props","child","hasError","touched","error","className","s","formControls","requiredField","value","maxLengthCreator","maxLength","length","inp","LoginReduxForm","reduxForm","form","handleSubmit","captchaUrl","onSubmit","type","placeholder","name","component","validate","src","alt","formSummaryError","connect","state","isAuth","auth","login","to","s2","auth__form","formData","email","password","rememberMe","captcha"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,aAAe,mCAAmC,MAAQ,4BAA4B,iBAAmB,yC,uHCE9GC,EAAc,SAAAC,GAAO,OAAI,YAAuC,IAApCC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,KAAgBC,GAAY,EAAtBC,MAAsB,yCAClEC,EAAWH,EAAKI,SAAWJ,EAAKK,MACtC,OACI,sBAAKC,UAAWC,IAAEC,aAAe,KAAOL,EAAWI,IAAEF,MAAQ,IAA7D,UACI,cAACP,EAAD,2BAAaC,GAAWE,IACvBE,GAAY,+BAAOH,EAAKK,c,iCCRrC,oEAAO,IAAMI,EAAgB,SAAAC,GACzB,IAAIA,EAEJ,MAAO,qBAIEC,EAAmB,SAACC,GAAD,OAAe,SAACF,GAE5C,GAAIA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,oBCRlCjB,EAAOC,QAAU,CAAC,WAAa,4B,iCCD/B,kHASMkB,EAAMjB,YAAY,SA4BlBkB,EAAiBC,YAAU,CAC7BC,KAAM,SADaD,EA1BL,SAAC,GAAyC,IAAvCE,EAAsC,EAAtCA,aAAcb,EAAwB,EAAxBA,MAAOc,EAAiB,EAAjBA,WACtC,OACI,uBAAMC,SAAUF,EAAhB,UACI,8BACI,cAAC,IAAD,CAAOG,KAAM,OAAQC,YAAa,QAASC,KAAM,QAASC,UAAWV,EAAKW,SAAUhB,QAExF,8BACI,cAAC,IAAD,CAAOY,KAAM,WAAYC,YAAa,WAAYC,KAAM,WAAYC,UAAWV,EAAKW,SAAUhB,QAElG,gCACI,cAAC,IAAD,CAAOY,KAAM,WAAYE,KAAM,aAAcC,UAAWV,IAD5D,kBAICK,GAAc,qBAAKO,IAAKP,EAAYQ,IAAI,YACxCR,GAAc,cAAC,IAAD,CAAOE,KAAM,OAAQC,YAAa,UAAWC,KAAM,UAAWC,UAAWV,IAEvFT,GAAS,qBAAKC,UAAWC,IAAEqB,iBAAlB,SACLvB,IAEL,8BACI,oDAiCDwB,uBALS,SAACC,GAAD,MAAY,CAChCC,OAAQD,EAAME,KAAKD,OACnBZ,WAAYW,EAAME,KAAKb,cAGa,CAAEc,WAA3BJ,EAvBD,SAAC5B,GAMX,OAAIA,EAAM8B,OACC,cAAC,IAAD,CAAUG,GAAI,aAIrB,sBAAK5B,UAAW6B,IAAGC,WAAnB,UACI,uCACA,cAACrB,EAAD,CAAgBK,SAXP,SAACiB,GACdpC,EAAMgC,MAAMI,EAASC,MAAOD,EAASE,SAAUF,EAASG,WAAYH,EAASI,UAUrCtB,WAAYlB,EAAMkB","file":"static/js/7.84a0ce17.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControls\":\"FormControls_formControls___5AgI\",\"error\":\"FormControls_error__2MtEI\",\"formSummaryError\":\"FormControls_formSummaryError__2gaZG\"};","import React from 'react';\nimport s from './FormControls.module.css';\n\nexport const FormControl = Element => ({ input, meta, child, ...props }) => {\n    const hasError = meta.touched && meta.error;\n    return (\n        <div className={s.formControls + ' ' + (hasError ? s.error : '')}>\n            <Element {...input} {...props} />\n            {hasError && <span>{meta.error}</span>}\n        </div>\n    )\n}","export const requiredField = value => {\n    if (value) return undefined;\n\n    return 'Field is required';\n\n}\n\nexport const maxLengthCreator = (maxLength) => (value) => {\n    // debugger\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\n\n    return undefined;\n\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"auth__form\":\"Login_auth__form__yxA-D\"};","import { reduxForm, Field } from 'redux-form';\nimport { FormControl } from '../components/Common/FormControls/FormControls';\nimport { requiredField } from '../utils/validator/validators';\nimport { login } from '../redux/authReducer';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport s from '../components/Common/FormControls/FormControls.module.css';\nimport s2 from './Login.module.css';\n\nconst inp = FormControl('input');\n\nconst LoginForm = ({ handleSubmit, error, captchaUrl }) => {\n    return (\n        <form onSubmit={handleSubmit}>\n            <div>\n                <Field type={\"text\"} placeholder={\"Email\"} name={\"email\"} component={inp} validate={requiredField} />\n            </div>\n            <div>\n                <Field type={\"password\"} placeholder={\"Password\"} name={\"password\"} component={inp} validate={requiredField} />\n            </div>\n            <div>\n                <Field type={\"checkbox\"} name={\"rememberMe\"} component={inp} /> remember me\n                </div>\n\n            {captchaUrl && <img src={captchaUrl} alt=\"captcha\" />}\n            {captchaUrl && <Field type={\"text\"} placeholder={\"captcha\"} name={\"captcha\"} component={inp} />}\n\n            {error && <div className={s.formSummaryError}>\n                {error}\n            </div>}\n            <div>\n                <button>Log In</button>\n            </div>\n        </form>\n    )\n}\n\nconst LoginReduxForm = reduxForm({\n    form: 'login'\n})(LoginForm)\n\nconst Login = (props) => {\n\n    const onSubmit = (formData) => {\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captcha)\n    }\n\n    if (props.isAuth) {\n        return <Redirect to={\"/profile\"} />\n    }\n\n    return (\n        <div className={s2.auth__form}>\n            <h1>Login</h1>\n            <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl} />\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    isAuth: state.auth.isAuth,\n    captchaUrl: state.auth.captchaUrl\n})\n\nexport default connect(mapStateToProps, { login })(Login);"],"sourceRoot":""}