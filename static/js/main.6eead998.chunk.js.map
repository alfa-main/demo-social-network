{"version":3,"sources":["components/Header/Header.module.css","Api/profile-api.ts","redux/profileReducer.tsx","hoc/AuthRedirect.tsx","redux/dialogsReducer.tsx","components/Common/Preloader/Preloader.module.css","Api/Api.ts","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Nav/Nav.tsx","components/News/News.js","components/Music/Music.tsx","components/Settings/Settings.tsx","Api/users-api.ts","utils/objectHelpers.ts","redux/usersReducer.tsx","components/Common/Pagination/Pagination.tsx","components/Users/User.tsx","components/Users/Users.tsx","redux/usersSelectors.tsx","components/Users/UsersContainer.tsx","redux/appReducer.tsx","components/Other/Other.js","App.tsx","reportWebVitals.js","redux/redux-store.tsx","index.js","components/Common/Preloader/Preloader.tsx","components/Users/Users.module.css","Api/security-api.ts","Api/auth-api.ts","redux/authReducer.tsx","components/Common/Pagination/Pagination.module.css"],"names":["module","exports","profileApi","userId","instance","get","then","res","data","status","put","photoFile","formData","FormData","append","headers","profile","ADD_POST","UPDATE_POST_MESSAGE","UPDATE_POST_TITLE","UPDATE_POST_IMAGE","INCREASE_LIKE","DECREASE_LIKE","DELETE_POST","SET_USER_PROFILE","SET_STATUS","SAVE_PHOTO_SUCCESS","SAVE_PROFILE_SUCCESS","initialState","posts","id","title","message","image","likesCount","liked","newPostMessage","newPostTitle","newPostImage","actions","addPost","type","updatePostMessage","newPostText","updatePostTitle","updatePostImage","increaseLike","postId","decreaseLike","deletePost","setUserProfile","setStatus","savePhotoSuccess","photos","saveProfileSuccess","getUserProfile","dispatch","a","response","getStatus","updateStatus","resultCode","savePhoto","file","saveProfile","stopSubmit","_error","messages","Promise","reject","profileReducer","state","action","map","post","filter","mapStateToPropsRedirect","isAuth","auth","withAuthRedirect","WrappedComponent","connect","props","restProps","to","SEND_MESSAGE","dialogs","name","sendMessage","newMessageBody","dialogsReducer","body","ResultCodes","ResultCodeForCaptcha","axios","create","withCredentials","baseURL","Header","span","src","className","s","logo","alt","userLogin","login","onClick","logout","HeaderContainer","this","React","Component","Nav","theme","mode","defaultSelectedKeys","Item","icon","UserOutlined","MessageOutlined","ReadOutlined","PlayCircleOutlined","ContactsOutlined","SettingOutlined","News","Music","Settings","usersApi","getUsers","currentPage","pageSize","unfollowUsers","usersId","delete","followUsers","updateObjectInArray","items","itemId","objPropName","newObjProps","u","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","users","totalUsersCount","isFetching","followingInProgress","_followUnfollowFlow","apiMethod","actionCreator","usersReducer","followed","Pagination","totalItemsCount","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","paginator","btn_prev","p","cn","selectedPage","pageNumber","e","btn_next","User","user","unfollow","follow","small","users__photo","shape","size","users__follow","disabled","some","Users","container","usersPage","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","requestUsers","Preloader","compose","bind","page","totalCount","SET_INITIALIZED_SUCCESS","initialized","appReducer","Other","class","Layout","Sider","Content","DialogsContainer","lazy","ProfileContainer","Login","App","catchAllUnhandledErrors","alert","initializeApp","window","addEventListener","removeEventListener","trigger","collapsible","style","padding","minHeight","exact","path","render","Suspense","fallback","component","withRouter","app","promise","getAuthUserData","all","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","profilePage","dialogsPage","authReducer","form","formReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","getState","ReactDOM","StrictMode","document","getElementById","preloader","securityApi","authApi","email","password","rememberMe","captcha","SET_USER_DATA","SET_CAPTCHA_URL_SUCCESS","captchaUrl","payload","Success","CaptchaIsRequired","getCaptchaUrl","length","url"],"mappings":"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","file":"static/js/main.6eead998.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"Header_logo__11FQu\",\"userLogin\":\"Header_userLogin__1oybt\"};","import { ProfileType, PhotosType } from \"../types/types\"\nimport { instance, APIResponseType } from \"./Api\"\n\ntype SavePhotoResponseDataType = {\n    photos: PhotosType\n}\n\nexport const profileApi = {\n    getProfile(userId: number) {\n        return instance.get<ProfileType>(`profile/${userId}`)\n            .then(res => res.data)\n    },\n    getStatus(userId: number) {\n        return instance.get<string>(`profile/status/${userId}`)\n            .then(res => res.data)\n    },\n    updateStatus(status: string) {\n        return instance.put<APIResponseType>(`profile/status`, { status })\n            .then(res => res.data)\n    },\n    savePhoto(photoFile: File) {\n        let formData = new FormData();\n        formData.append(\"image\", photoFile);\n        return instance.put<APIResponseType<SavePhotoResponseDataType>>(`profile/photo`, formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data'\n            }\n        })\n            .then(res => res.data)\n    },\n    saveProfile(profile: ProfileType) {\n        return instance.put<APIResponseType>(`profile`, profile)\n            .then(res => res.data)\n    },\n}","import { profileApi } from \"../Api/profile-api\";\nimport { FormAction, stopSubmit } from \"redux-form\";\nimport { PostType, ProfileType, PhotosType } from \"../types/types\";\nimport { BaseThunkType, InferActionsTypes } from './redux-store';\n\nconst ADD_POST = 'PROFILE/ADD-POST';\nconst UPDATE_POST_MESSAGE = 'PROFILE/UPDATE-POST-MESSAGE';\nconst UPDATE_POST_TITLE = 'PROFILE/UPDATE-POST-TITLE';\nconst UPDATE_POST_IMAGE = 'PROFILE/UPDATE-POST-IMAGE';\nconst INCREASE_LIKE = 'PROFILE/INCREASE-LIKE';\nconst DECREASE_LIKE = 'PROFILE/DECREASE-LIKE';\nconst DELETE_POST = 'PROFILE/DELETE-POST';\nconst SET_USER_PROFILE = 'PROFILE/SET-USER-PROFILE';\nconst SET_STATUS = 'PROFILE/SET-STATUS';\nconst SAVE_PHOTO_SUCCESS = 'PROFILE/SAVE-PHOTO-SUCCESS';\nconst SAVE_PROFILE_SUCCESS = 'PROFILE/SAVE-PROFILE-SUCCESS';\n\nexport type InitialStateType = typeof initialState;\ntype ActionsTypes = InferActionsTypes<typeof actions>;\nexport type ThunkTypeProfile = BaseThunkType<ActionsTypes | FormAction>;\n\nlet initialState = {\n    posts: [\n        { id: 1, title: 'My posts', message: 'I work programmer', image: 'https://image.api.playstation.com/cdn/EP0177/CUSA05674_00/rnnJiqNSkmOAPsSEgv5a5O1m2cFODvuP.png', likesCount: 0, liked: false },\n        { id: 2, title: 'My posts', message: 'I work programmer ', image: 'https://i.pinimg.com/originals/df/33/ed/df33ed9f3c8eda51084580a19455fef2.jpg', likesCount: 0, liked: false },\n        { id: 3, title: 'My posts', message: 'I work programmer ', image: 'https://img.pravda.com/images/doc/c/9/c9c3290-haker-12296.jpg', likesCount: 0, liked: false },\n        { id: 4, title: 'My posts', message: 'I work programmer ', image: 'https://m.iguides.ru/upload/iblock/abe/abe66fd0cf78e016f453ee6b3dd6d0da.jpg', likesCount: 0, liked: false },\n        { id: 5, title: 'My posts', message: 'I work programmer ', image: 'https://www.anti-malware.ru/files/styles/imagesize400w/public/images/source/news412.png?itok=eNzt1132', likesCount: 0, liked: false },\n        { id: 6, title: 'My posts', message: 'I work programmer ', image: 'https://habrastorage.org/webt/qm/hw/66/qmhw66hf0z2z4crwrxi6szec6pw.png', likesCount: 0, liked: false },\n    ] as Array<PostType>,\n    newPostMessage: '' as string,\n    newPostTitle: '' as string,\n    newPostImage: '' as string,\n    profile: null as ProfileType | null,\n    status: '' as string\n}\n\nconst profileReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\n    switch (action.type) {\n        case ADD_POST: {\n            return {\n                ...state,\n                posts: [...state.posts, {\n                    id: 7,\n                    title: action.title,\n                    message: action.message,\n                    image: action.image,\n                    likesCount: 0,\n                    liked: false\n                }],\n                newPostMessage: '',\n                newPostTitle: '',\n                newPostImage: ''\n            }\n        }\n        case UPDATE_POST_MESSAGE: {\n            return {\n                ...state,\n                newPostMessage: action.newPostText\n            }\n        }\n        case UPDATE_POST_TITLE: {\n            return {\n                ...state,\n                newPostTitle: action.newPostTitle\n            }\n        }\n        case UPDATE_POST_IMAGE: {\n            return {\n                ...state,\n                newPostImage: action.newPostImage\n            }\n        }\n        case INCREASE_LIKE: {\n            return {\n                ...state,\n                posts: state.posts.map(post => {\n                    if (post.id === action.postId) {\n                        return { ...post, likesCount: post.likesCount + 1, liked: true }\n                    }\n                    return post;\n                })\n            }\n        }\n        case DECREASE_LIKE: {\n            return {\n                ...state,\n                posts: state.posts.map(post => {\n                    if (post.id === action.postId) {\n                        return { ...post, likesCount: post.likesCount - 1, liked: false }\n                    }\n                    return post;\n                })\n            }\n        }\n        case DELETE_POST: {\n            return {\n                ...state,\n                posts: state.posts.filter(post => {\n                    if (post.id === action.postId) return post.id !== action.postId;\n                    return post;\n                })\n            }\n        }\n        case SET_USER_PROFILE: {\n            return { ...state, profile: action.profile }\n        }\n        case SET_STATUS: {\n            return { ...state, status: action.status }\n        }\n        case SAVE_PHOTO_SUCCESS: {\n            return { ...state, profile: { ...state.profile, photos: action.photos } as ProfileType }\n        }\n        case SAVE_PROFILE_SUCCESS: {\n            return { ...state, profile: action.profile }\n        }\n\n        default:\n            return state;\n    }\n}\n\nexport const actions = {\n    addPost: (title: string, message: string, image: string) => ({ type: ADD_POST, title, message, image } as const),\n    updatePostMessage: (newPostText: string) => ({ type: UPDATE_POST_MESSAGE, newPostText } as const),\n    updatePostTitle: (newPostTitle: string) => ({ type: UPDATE_POST_TITLE, newPostTitle } as const),\n    updatePostImage: (newPostImage: string) => ({ type: UPDATE_POST_IMAGE, newPostImage } as const),\n    increaseLike: (postId: number) => ({ type: INCREASE_LIKE, postId } as const),\n    decreaseLike: (postId: number) => ({ type: DECREASE_LIKE, postId } as const),\n    deletePost: (postId: number) => ({ type: DELETE_POST, postId } as const),\n    setUserProfile: (profile: ProfileType) => ({ type: SET_USER_PROFILE, profile } as const),\n    setStatus: (status: string) => ({ type: SET_STATUS, status } as const),\n    savePhotoSuccess: (photos: PhotosType) => ({ type: SAVE_PHOTO_SUCCESS, photos } as const),\n    saveProfileSuccess: (profile: ProfileType) => ({ type: SAVE_PROFILE_SUCCESS, profile } as const)\n}\n\nexport const getUserProfile = (userId: number): ThunkTypeProfile => async (dispatch) => {\n    let response = await profileApi.getProfile(userId);\n    dispatch(actions.setUserProfile(response));\n}\n\nexport const getStatus = (userId: number): ThunkTypeProfile => async (dispatch) => {\n    let response = await profileApi.getStatus(userId);\n    dispatch(actions.setStatus(response));\n}\n\nexport const updateStatus = (status: string): ThunkTypeProfile => async (dispatch) => {\n    let response = await profileApi.updateStatus(status);\n    if (response.resultCode === 0) {\n        dispatch(actions.setStatus(status));\n    }\n}\n\nexport const savePhoto = (file: File): ThunkTypeProfile => async (dispatch) => {\n    let response = await profileApi.savePhoto(file);\n    if (response.resultCode === 0) {\n        dispatch(actions.savePhotoSuccess(response.data.photos));\n    }\n}\n\nexport const saveProfile = (profile: ProfileType): ThunkTypeProfile => async (dispatch) => {\n    let response = await profileApi.saveProfile(profile);\n    if (response.resultCode === 0) {\n        dispatch(actions.saveProfileSuccess(profile));\n    } else {\n        dispatch(stopSubmit('editProfile', { _error: response.messages[0] }));\n        return Promise.reject(response.messages[0]);\n    }\n}\n\nexport default profileReducer;","import React from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { AppStateType } from \"../redux/redux-store\";\n\nlet mapStateToPropsRedirect = (state: AppStateType) => ({\n    isAuth: state.auth.isAuth\n} as MapPropsType)\n\ntype MapPropsType = {\n    isAuth: boolean\n}\n\ntype DispatchPropsType = {}\n\nexport function withAuthRedirect<WCP> (WrappedComponent: React.ComponentType<WCP>) {\n    const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (props) => {\n        let { isAuth, ...restProps } = props;\n        if (!isAuth) return <Redirect to={\"/login\"} />\n        \n        return <WrappedComponent {...restProps as unknown as WCP} />\n    }\n\n    let ConnectedAuthRedirectComponent = connect<MapPropsType, DispatchPropsType, WCP, AppStateType>(mapStateToPropsRedirect)(RedirectComponent);\n\n    return ConnectedAuthRedirectComponent;\n}\n\n","import { InferActionsTypes } from \"./redux-store\";\n\nconst SEND_MESSAGE = 'SEND-MESSAGE';\n\nexport type InitialStateType = typeof initialState;\ntype ActionsType = InferActionsTypes<typeof actions>;\n\nlet initialState = {\n    dialogs: [\n        { id: 1, name: 'Dima' },\n        { id: 2, name: 'Andrew' },\n        { id: 3, name: 'Svetlana' },\n        { id: 4, name: 'Vlad' },\n        { id: 5, name: 'Alex' },\n        { id: 6, name: 'Valera' },\n    ],\n    messages: [\n        { id: 1, message: 'Hi' },\n        { id: 2, message: 'How is your study?' },\n        { id: 3, message: 'What is the weather like today?' },\n        { id: 4, message: 'yo' },\n        { id: 5, message: 'yo' },\n        { id: 6, message: 'yo' },\n    ]\n}\n\nexport const dialogsReducer = (state = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case SEND_MESSAGE:\n            let body = action.newMessageBody;\n            return {\n                ...state,\n                messages: [...state.messages, { id: 7, message: body }],\n            };\n\n        default:\n            return state;\n    }\n}\n\nexport const actions = {\n    sendMessage: (newMessageBody: string) => ({ type: SEND_MESSAGE, newMessageBody } as const)\n}\n\nexport default dialogsReducer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader\":\"Preloader_preloader__3HCxn\"};","import axios from 'axios';\nimport { UsersType } from '../types/types';\n\nexport const instance = axios.create({\n    withCredentials: true,\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n    headers: {\n        'API-KEY': \"297b774d-fb48-4548-bf21-b56702caae4a\"\n    },\n})\n\nexport enum ResultCodes {\n    Success = 0,\n    Error = 1\n}\n\nexport enum ResultCodeForCaptcha {\n    CaptchaIsRequired = 10\n}\n\nexport type GetItemsType = {\n    items: Array<UsersType>,\n    totalCount: number,\n    error: string\n}\n\nexport type APIResponseType<D = {}, RC = ResultCodes> = {\n    data: D,\n    messages: Array<string>,\n    resultCode: RC\n}","import { Button, Col, Row } from 'antd';\nimport Text from 'antd/lib/typography/Text';\nimport React from 'react';\nimport { NavLink } from \"react-router-dom\";\nimport s from './Header.module.css';\n\ntype Props = {\n  isAuth: boolean,\n  login: string | null,\n  logout: () => void\n}\n\nconst Header: React.FC<Props> = (props) => {\n  return (\n    <Row>\n      <Col span={18}>\n        <img\n          src=\"https://st2.depositphotos.com/4249533/6729/v/600/depositphotos_67293949-stock-illustration-web-developer.jpg\"\n          className={s.logo}\n          alt=\"icon\"\n        />\n      </Col>\n\n      {\n        props.isAuth\n          ? <>\n            <Col span={1} className={s.userLogin}>\n              <Text>{props.login} - </Text>\n            </Col>\n            <Col span={5}>\n              <Button type={'primary'} onClick={props.logout}>Log out</Button>\n            </Col>\n          </>\n          : <Col span={6}><NavLink to={'/login'}>Login</NavLink></Col>}\n    </Row>\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport Header from './Header';\nimport { connect } from 'react-redux';\nimport { logout } from '../../redux/authReducer';\nimport { AppStateType } from '../../redux/redux-store';\n\ntype MapDispatchProps = {\n    logout: () => void,\n}\n\ntype MapStateProps = {\n    isAuth: boolean,\n    login: string | null\n}\n\ntype OwnProps = {}\n\ntype Props = MapStateProps & MapDispatchProps;\n\nclass HeaderContainer extends React.Component<Props> {\n    \n    render() {\n        return <Header {...this.props} />\n    }\n}\n\nlet mapStateToProps = (state: AppStateType): MapStateProps => ({\n    isAuth: state.auth.isAuth,\n    login: state.auth.login\n});\n\nexport default connect<MapStateProps, MapDispatchProps, OwnProps, AppStateType>(mapStateToProps, { logout })(HeaderContainer);","import { NavLink } from 'react-router-dom';\nimport { Menu } from 'antd';\nimport {\n  SettingOutlined,\n  UserOutlined,\n  ContactsOutlined,\n  ReadOutlined,\n  MessageOutlined,\n  PlayCircleOutlined\n} from '@ant-design/icons';\n\nconst Nav = () => {\n  return (\n    <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['1']}>\n      <Menu.Item key=\"1\" icon={<UserOutlined />}>\n        <NavLink to=\"/profile\">Profile</NavLink>\n      </Menu.Item>\n      <Menu.Item key=\"2\" icon={<MessageOutlined />}>\n        <NavLink to=\"/dialogs\">Messages</NavLink>\n      </Menu.Item>\n      <Menu.Item key=\"3\" icon={<ReadOutlined />}>\n        <NavLink to=\"/news\">News</NavLink>\n      </Menu.Item>\n      <Menu.Item key=\"4\" icon={<PlayCircleOutlined />}>\n        <NavLink to=\"/music\">Music</NavLink>\n      </Menu.Item>\n      <Menu.Item key=\"5\" icon={<ContactsOutlined />}>\n        <NavLink to=\"/users\">Users</NavLink>\n      </Menu.Item>\n      <Menu.Item key=\"6\" icon={<SettingOutlined />}>\n        <NavLink to=\"/settings\">Settings</NavLink>\n      </Menu.Item>\n    </Menu>\n  );\n}\n\nexport default Nav;\n","import React from 'react';\n\nconst News = () => {\n  return (\n    <div>\n      News\n    </div>\n  );\n}\n\nexport default News;\n","import React from 'react';\n\nconst Music = () => {\n  return (\n    <div>\n      Music\n    </div>\n  );\n}\n\nexport default Music;\n","\nconst Settings = () => {\n  return (\n    <div>\n      Settings\n    </div>\n  );\n}\n\nexport default Settings;\n","import { UsersType } from \"../types/types\"\nimport { instance } from \"./Api\"\n\ntype GetUsers = {\n    items: Array<UsersType>,\n    totalCount: number,\n    error: string\n}\n\n// type UnfollowUsersType = {\n//     resultCode: ResultCodes,\n//     messages: Array<string>,\n//     data: any\n// }\n\nexport const usersApi = {\n    getUsers(currentPage = 1, pageSize = 10) {\n        return instance.get<GetUsers>(`users?page=${currentPage}&count=${pageSize}`)\n            .then(response => response.data)\n    },\n    unfollowUsers(usersId: number) {\n        return instance.delete(`follow/${usersId}`)\n            .then(response => response.data)\n    },\n    followUsers(usersId: number) {\n        return instance.post(`follow/${usersId}`)\n    }\n}","import { UsersType } from './../types/types';\n\nexport const updateObjectInArray = (items: Array<UsersType>, itemId: number, objPropName: string, newObjProps: {followed: boolean}) => {\n    return items.map((u: UsersType) => {\n        if (u[objPropName as keyof UsersType] === itemId) {\n            return { ...u, ...newObjProps }\n        }\n        return u;\n    });\n}","import { usersApi } from \"../Api/users-api\";\nimport { updateObjectInArray } from \"../utils/objectHelpers\";\nimport { UsersType } from \"../types/types\";\nimport { BaseThunkType, InferActionsTypes } from \"./redux-store\";\nimport { Dispatch } from \"react\";\nimport { AxiosResponse } from \"axios\";\n\nconst FOLLOW = 'usersReducer/FOLLOW';\nconst UNFOLLOW = 'usersReducer/UNFOLLOW';\nconst SET_USERS = 'usersReducer/SET-USERS';\nconst SET_CURRENT_PAGE = 'usersReducer/SET-CURRENT-PAGE';\nconst SET_TOTAL_USERS_COUNT = 'usersReducer/SET-TOTAL-USERS-COUNT';\nconst TOGGLE_IS_FETCHING = 'usersReducer/TOGGLE-IS-FETCHING';\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'usersReducer/TOGGLE-IS-FOLLOWING-PROGRESS';\n\nlet initialState = {\n    users: [] as Array<UsersType>,\n    pageSize: 10 as number,\n    totalUsersCount: 0 as number,\n    currentPage: 1 as number,\n    isFetching: true as boolean,\n    followingInProgress: [] as Array<number>, // array of user id\n}\n\ntype InitialStateType = typeof initialState;\ntype ActionsTypes = InferActionsTypes<typeof actions>;\ntype ThunkType = BaseThunkType<ActionsTypes>\n\nconst usersReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\n    switch (action.type) {\n        case FOLLOW:\n            return {\n                ...state,\n                users: updateObjectInArray(state.users, action.userId, 'id', { followed: true })\n            }\n        case UNFOLLOW:\n            return {\n                ...state,\n                users: updateObjectInArray(state.users, action.userId, 'id', { followed: false })\n            }\n        case SET_USERS:\n            return {\n                ...state,\n                users: action.users\n            }\n        case SET_CURRENT_PAGE:\n            return {\n                ...state,\n                currentPage: action.currentPage\n            }\n        case SET_TOTAL_USERS_COUNT:\n            return {\n                ...state,\n                totalUsersCount: action.totalUsersCount\n            }\n        case TOGGLE_IS_FETCHING:\n            return {\n                ...state,\n                isFetching: action.isFetching\n            }\n        case TOGGLE_IS_FOLLOWING_PROGRESS:\n            return {\n                ...state,\n                followingInProgress: action.isFetching\n                    ? [...state.followingInProgress, action.userId]\n                    : state.followingInProgress.filter(id => id !== action.userId)\n            }\n        default:\n            return state;\n    }\n}\n\nexport const actions = {\n    followSuccess: (userId: number) => ({ type: FOLLOW, userId } as const),\n    unfollowSuccess: (userId: number) => ({ type: UNFOLLOW, userId } as const),\n    setUsers: (users: Array<UsersType>) => ({ type: SET_USERS, users } as const),\n    setCurrentPage: (currentPage: number) => ({ type: SET_CURRENT_PAGE, currentPage } as const),\n    setTotalUsersCount: (totalUsersCount: number) => ({ type: SET_TOTAL_USERS_COUNT, totalUsersCount } as const),\n    toggleIsFetching: (isFetching: boolean) => ({ type: TOGGLE_IS_FETCHING, isFetching } as const),\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => ({ type: TOGGLE_IS_FOLLOWING_PROGRESS, isFetching, userId } as const),\n}\n\nexport const requestUsers = (page: number, pageSize: number): ThunkType =>\n    async (dispatch) => {\n        dispatch(actions.toggleIsFetching(true));\n        dispatch(actions.setCurrentPage(page));\n\n        let response = await usersApi.getUsers(page, pageSize)\n        dispatch(actions.toggleIsFetching(false));\n        dispatch(actions.setUsers(response.items));\n        dispatch(actions.setTotalUsersCount(response.totalCount));\n    }\n\nconst _followUnfollowFlow = async (dispatch: Dispatch<ActionsTypes>,\n    userId: number,\n    apiMethod: (usersId: number) => Promise<AxiosResponse<any>>,\n    actionCreator: (userId: number) => ActionsTypes\n) => {\n    dispatch(actions.toggleFollowingProgress(true, userId));\n    let response = await apiMethod(userId);\n    if (response.data.resultCode === 0) {\n        dispatch(actionCreator(userId));\n    }\n    dispatch(actions.toggleFollowingProgress(false, userId));\n}\n\nexport const follow = (userId: number): ThunkType =>\n    async (dispatch) => {\n        _followUnfollowFlow(dispatch, userId, usersApi.followUsers.bind(usersApi), actions.followSuccess);\n    }\n\nexport const unfollow = (userId: number): ThunkType =>\n    async (dispatch) => {\n        _followUnfollowFlow(dispatch, userId, usersApi.unfollowUsers.bind(usersApi), actions.unfollowSuccess);\n    }\n\nexport default usersReducer;","import React, { useState } from 'react';\nimport s from './Pagination.module.css';\nimport cn from 'classnames';\n\ntype PropsType = {\n    totalItemsCount: number,\n    pageSize: number,\n    currentPage: number,\n    onPageChanged: (p: number) => void,\n    portionSize?: number\n}\n\nlet Pagination: React.FC<PropsType> = (\n    {\n        totalItemsCount,\n        pageSize,\n        currentPage,\n        onPageChanged,\n        portionSize = 5\n    }) => {\n    \n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\n\n    let pages: Array<number> = [];\n    for (let i = 1; i <= pagesCount; i++) {\n        pages.push(i);\n    }\n\n    let portionCount = Math.ceil(pagesCount / portionSize);\n    let [portionNumber, setPortionNumber] = useState(1);\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\n    let rightPortionPageNumber = portionNumber * portionSize;\n\n    return (\n        <div className={s.paginator}>\n            <span>\n                {portionNumber > 1\n                    && <button className={s.btn_prev} onClick={() => { setPortionNumber(portionNumber - 1) }}>PREV</button>}\n            </span>\n            {pages\n                .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\n                .map((p) => {\n                    return <span className={cn({\n                        [s.selectedPage]: currentPage === p\n                    }, s.pageNumber)}\n                        key={p} onClick={(e) => { onPageChanged(p); }}>{p}</span>\n                })}\n            <span>\n                {portionCount > portionNumber &&\n                    <button className={s.btn_next} onClick={() => { setPortionNumber(portionNumber + 1) }} >NEXT</button>}\n            </span>\n        </div>\n    )\n}\n\nexport default Pagination;","import React from 'react';\nimport s from './Users.module.css';\nimport { NavLink } from 'react-router-dom';\nimport { UsersType } from '../../types/types';\nimport Avatar from 'antd/lib/avatar/avatar';\nimport { UserOutlined } from '@ant-design/icons';\nimport { Button, Image } from 'antd';\n\ntype Props = {\n    user: UsersType,\n    followingInProgress: Array<number>,\n    unfollow: (userId: number) => void,\n    follow: (userId: number) => void\n}\n\nlet User: React.FC<Props> = ({ user, followingInProgress, unfollow, follow }) => {\n\n    return (\n        <div className={s.users}>\n            <div>\n                <NavLink to={'/profile/' + user.id}>\n                    {user.photos.small\n                        ? <Image src={user.photos.small} className={s.users__photo} alt='small' />\n                        : <Avatar shape=\"square\" size={64} icon={<UserOutlined />} />\n                    }\n                </NavLink>\n            </div>\n            {user.followed ?\n                <Button type={'primary'} className={s.users__follow} disabled={followingInProgress.some(id => id === user.id)}\n                    onClick={() => unfollow(user.id)}>Unfollow</Button>\n                : <Button type={'primary'} className={s.users__follow} disabled={followingInProgress.some(id => id === user.id)}\n                    onClick={() => follow(user.id)}>Follow</Button>}\n            <div>{user.name}</div>\n            <div>{user.status}</div>\n            <div>{\"user.location.city\"}</div>\n            <div>{\"user.location.country\"}</div>\n        </div>)\n}\n\nexport default User;","import React from 'react';\nimport s from './Users.module.css';\nimport Pagination from '../Common/Pagination/Pagination';\nimport User from './User';\nimport { UsersType } from '../../types/types';\n\ntype Props = {\n    totalUsersCount: number,\n    pageSize: number,\n    currentPage: number,\n    onPageChanged: (pageNumber: number) => void,\n    users: Array<UsersType>,\n    followingInProgress: Array<number>,\n    unfollow: (userId: number) => void,\n    follow: (userId: number) => void\n}\n\nlet Users: React.FC<Props> = (\n    {\n        currentPage,\n        totalUsersCount,\n        pageSize,\n        onPageChanged,\n        users,\n        followingInProgress,\n        unfollow,\n        follow\n    }) => {\n\n    return (\n        <div className={s.container} >\n            <Pagination\n                currentPage={currentPage}\n                totalItemsCount={totalUsersCount}\n                pageSize={pageSize}\n                onPageChanged={onPageChanged}\n            />\n            <div>\n                {\n                    users.map(u =>\n                        <User\n                            key={u.id}\n                            user={u}\n                            followingInProgress={followingInProgress}\n                            unfollow={unfollow}\n                            follow={follow}\n                        />)\n                }\n            </div>\n        </div >\n    )\n}\n\nexport default Users;","import { AppStateType } from \"./redux-store\";\n\nexport const getUsers = (state: AppStateType) => {\n    return state.usersPage.users;\n}\n\nexport const getPageSize = (state: AppStateType) => {\n    return state.usersPage.pageSize;\n}\n\nexport const getTotalUsersCount = (state: AppStateType) => {\n    return state.usersPage.totalUsersCount;\n}\n\nexport const getCurrentPage = (state: AppStateType) => {\n    return state.usersPage.currentPage;\n}\n\nexport const getIsFetching = (state: AppStateType) => {\n    return state.usersPage.isFetching;\n}\n\nexport const getFollowingInProgress = (state: AppStateType) => {\n    return state.usersPage.followingInProgress;\n}\n","import React from 'react';\nimport { follow, unfollow, requestUsers } from \"../../redux/usersReducer\";\nimport { connect } from 'react-redux';\nimport Users from './Users';\nimport Preloader from '../Common/Preloader/Preloader';\nimport { withAuthRedirect } from '../../hoc/AuthRedirect';\nimport { compose } from 'redux';\nimport { getPageSize, getUsers, getTotalUsersCount, getCurrentPage, getIsFetching, getFollowingInProgress } from '../../redux/usersSelectors';\nimport { UsersType } from '../../types/types';\nimport { AppStateType } from '../../redux/redux-store';\n\ntype MapDispatchProps = {\n    unfollow: (userId: number) => void,\n    follow: (userId: number) => void,\n    requestUsers: (currentPage: number, pageSize: number) => void,\n}\n\ntype MapStateProps = {\n    currentPage: number,\n    pageSize: number,\n    isFetching: boolean,\n    totalUsersCount: number,\n    users: Array<UsersType>,\n    followingInProgress: Array<number>,\n}\n\ntype OwnProps = {}\n\ntype Props = MapStateProps & MapDispatchProps;\n\nclass UsersContainer extends React.Component<Props> {\n\n    componentDidMount() {\n        this.props.requestUsers(this.props.currentPage, this.props.pageSize);\n    }\n\n    onPageChanged = (pageNumber: number) => {\n        this.props.requestUsers(pageNumber, this.props.pageSize);\n    }\n\n    render() {\n        return <>\n            {this.props.isFetching ? <Preloader /> : null}\n            <Users totalUsersCount={this.props.totalUsersCount}\n                pageSize={this.props.pageSize}\n                currentPage={this.props.currentPage}\n                onPageChanged={this.onPageChanged}\n                users={this.props.users}\n                follow={this.props.follow}\n                unfollow={this.props.unfollow}\n                followingInProgress={this.props.followingInProgress} />\n        </>\n    }\n}\n\nlet mapStateToProps = (state: AppStateType): MapStateProps => {\n    return {\n        users: getUsers(state),\n        pageSize: getPageSize(state),\n        totalUsersCount: getTotalUsersCount(state),\n        currentPage: getCurrentPage(state),\n        isFetching: getIsFetching(state),\n        followingInProgress: getFollowingInProgress(state),\n    }\n}\n\nexport default compose<React.ComponentType>(\n    connect<MapStateProps, MapDispatchProps, OwnProps, AppStateType>(\n        mapStateToProps,\n        {\n            follow,\n            unfollow,\n            requestUsers\n        }),\n    withAuthRedirect\n)(UsersContainer);","import { BaseThunkType, InferActionsTypes } from './redux-store';\nimport { getAuthUserData } from \"./authReducer\";\n\nconst SET_INITIALIZED_SUCCESS = 'appReducer/SET-INITIALIZED-SUCCESS';\n\nexport type InitialStateType = typeof initialState;\ntype ActionsTypes = InferActionsTypes<typeof actions>;\ntype ThunkType = BaseThunkType<ActionsTypes>\n\nlet initialState = {\n    initialized: false,\n}\n\nconst appReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\n    switch (action.type) {\n        case SET_INITIALIZED_SUCCESS:\n            return {\n                ...state,\n                initialized: true,\n            };\n        default:\n            return state;\n    }\n}\n\nconst actions = {\n    setInitializedSuccess: () => ({ type: SET_INITIALIZED_SUCCESS } as const)\n}\n\nexport const initializeApp = (): ThunkType => async (dispatch) => {\n    let promise = dispatch(getAuthUserData());\n\n    Promise.all([promise])\n        .then(() => {\n            dispatch(actions.setInitializedSuccess());\n        })\n}\n\nexport default appReducer;","import React from 'react';\nimport './Other.css';\n\nclass Other extends React.Component {\n  render() {\n    return (\n      <div class=\"Other\">\n        <h2>404</h2>\n        <h5>Что то пошло не так...</h5>\n      </div>\n\n    );\n  }\n}\n\nexport default Other;\n","import React from 'react';\nimport './App.css';\nimport HeaderContainer from './components/Header/HeaderContainer';\nimport Nav from './components/Nav/Nav';\nimport { Route, withRouter, Switch, Redirect } from \"react-router-dom\";\nimport News from \"./components/News/News\";\nimport Music from \"./components/Music/Music\";\nimport Settings from \"./components/Settings/Settings\";\nimport UsersContainer from \"./components/Users/UsersContainer\";\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { initializeApp } from './redux/appReducer';\nimport Preloader from './components/Common/Preloader/Preloader';\nimport Other from './components/Other/Other';\nimport { AppStateType } from './redux/redux-store';\n\nimport 'antd/dist/antd.css';\nimport { Layout } from 'antd';\nconst { Header, Sider, Content } = Layout;\n\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\nconst Login = React.lazy(() => import('./Login/Login'));\n\ntype MapPropsType = ReturnType<typeof mapStateToProps>\ntype DispatchPropsType = {\n  initializeApp: () => void\n}\n\nclass App extends React.Component<MapPropsType & DispatchPropsType> {\n  catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\n    alert(\"Some error occured\");\n  }\n\n  componentDidMount() {\n    this.props.initializeApp();\n    window.addEventListener('unhandledrejection', this.catchAllUnhandledErrors);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('unhandledrejection', this.catchAllUnhandledErrors);\n  }\n\n  render() {\n    if (!this.props.initialized) {\n      return <Preloader />\n    }\n    return (\n      <Layout>\n        <Sider trigger={null} collapsible>\n          <Nav />\n        </Sider>\n        <Layout className=\"site-layout\">\n          <Header className=\"site-layout-background\" style={{ padding: 0 }}>\n            <HeaderContainer />\n          </Header>\n          <Content\n            // className=\"site-layout-background\"\n            style={{\n              // margin: '24px 16px',\n              padding: '24px 16px',\n              minHeight: 280,\n              // backgroundColor: '#1890ff'\n            }}\n          >\n            <Switch>\n              <Route exact path=\"/\">\n                <Redirect to=\"/profile\" />\n              </Route>\n              <Route path=\"/profile/:userId?\" render={() => <React.Suspense fallback={<Preloader />}><ProfileContainer /></React.Suspense>} />\n              <Route path=\"/dialogs\" render={() => <React.Suspense fallback={<Preloader />}><DialogsContainer /></React.Suspense>} />\n              <Route exact path=\"/news\" component={News} />\n              <Route exact path=\"/music\" component={Music} />\n              <Route exact path=\"/users\" render={() => <UsersContainer />} />\n              <Route exact path=\"/settings\" component={Settings} />\n              <Route path=\"/login\" render={() => <React.Suspense fallback={<Preloader />}><Login /></React.Suspense>} />\n              <Route path=\"*\" render={() => <Other />} />\n            </Switch>\n          </Content>\n        </Layout>\n      </Layout>\n    );\n  }\n}\n\nconst mapStateToProps = (state: AppStateType) => ({\n  initialized: state.app.initialized\n})\n\nexport default compose(\n  withRouter,\n  connect(mapStateToProps, { initializeApp }))(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createStore, combineReducers, applyMiddleware, compose, Action } from 'redux';\nimport profileReducer from \"./profileReducer\";\nimport dialogsReducer from \"./dialogsReducer\";\nimport usersReducer from './usersReducer';\nimport authReducer from './authReducer';\nimport thunkMiddleware from 'redux-thunk';\nimport { reducer as formReducer } from 'redux-form'\nimport appReducer from './appReducer';\nimport { ThunkAction } from \"redux-thunk\";\n\nlet rootReducer = combineReducers({\n    profilePage: profileReducer,\n    dialogsPage: dialogsReducer,\n    usersPage: usersReducer,\n    auth: authReducer,\n    form: formReducer,\n    app: appReducer\n});\n\ntype RootReducer = typeof rootReducer;\nexport type AppStateType = ReturnType<RootReducer>;\n\nexport type InferActionsTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\n\nexport type BaseThunkType<AT extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, AT>;\n\n// @ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)));\n\n\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './redux/redux-store';\nimport { HashRouter } from \"react-router-dom\";\nimport { Provider } from 'react-redux';\n\nwindow.state = store.getState();\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <Provider store={store}>\n                <App />\n            </Provider>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\nreportWebVitals();\n","import { Spin } from 'antd';\nimport s from './Preloader.module.css';\n\nlet Preloader: React.FC = () => {\n    return <Spin size={'large'} className={s.preloader} />\n}\n\nexport default Preloader;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"users\":\"Users_users__14JYh\",\"users__photo\":\"Users_users__photo__aKG2k\",\"users__follow\":\"Users_users__follow__27_jL\"};","import { instance } from \"./Api\"\n\ntype SecurityApiResponseType = {\n    url: string\n}\n\nexport const securityApi = {\n    getCaptchaUrl() {\n        return instance.get<SecurityApiResponseType>(`security/get-captcha-url`)\n        .then(response => response.data)\n    },\n}","import { instance, APIResponseType, ResultCodeForCaptcha, ResultCodes } from \"./Api\";\n\ntype AuthMeResponseType = {\n    id: number,\n    email: string,\n    login: string\n}\n\ntype LoginResponseType = {\n    userId: number\n}\n\nexport const authApi = {\n    authMe() {\n        return instance.get<APIResponseType<AuthMeResponseType>>(`auth/me`)\n            .then(res => res.data)\n    },\n    login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\n        return instance.post<APIResponseType<LoginResponseType, ResultCodes | ResultCodeForCaptcha>>(`auth/login`, { email, password, rememberMe, captcha })\n            .then(res => res.data)\n    },\n    logout() {\n        return instance.delete(`auth/login`)\n            .then(res => res.data)\n    }\n}","import { securityApi } from '../Api/security-api';\nimport { authApi } from '../Api/auth-api';\nimport { ResultCodes, ResultCodeForCaptcha } from \"../Api/Api\";\nimport { FormAction, stopSubmit } from \"redux-form\";\nimport { BaseThunkType, InferActionsTypes } from './redux-store';\n\nconst SET_USER_DATA = 'SET-USER-DATA';\nconst SET_CAPTCHA_URL_SUCCESS = 'SET-CAPTCHA-URL-SUCCESS';\n\nexport type InitialStateType = typeof initialState;\ntype ActionsTypes = InferActionsTypes<typeof actions>;\ntype ThunkType = BaseThunkType<ActionsTypes | FormAction>;\n\nlet initialState = {\n    userId: null as number | null,\n    email: null as string | null,\n    login: null as string | null,\n    isAuth: false as boolean,\n    captchaUrl: null as string | null // if null, then captcha is not required\n}\n\nconst authReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\n    switch (action.type) {\n        case SET_USER_DATA:\n        case SET_CAPTCHA_URL_SUCCESS:\n            return {\n                ...state,\n                ...action.payload,\n            };\n        default:\n            return state;\n    }\n}\n\nexport const actions = {\n    setAuthUserData : (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\n        type: SET_USER_DATA,\n        payload: { userId, email, login, isAuth }\n    } as const),\n    getCaptchaUrlSuccess : (captchaUrl: string) => ({\n        type: SET_CAPTCHA_URL_SUCCESS,\n        payload: { captchaUrl }\n    } as const),\n}\n\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\n    const response = await authApi.authMe();\n    if (response.resultCode === ResultCodes.Success) {\n        const { id, email, login } = response.data;\n        dispatch(actions.setAuthUserData(id, email, login, true));\n    }\n}\n\nexport const login = (\n    email: string,\n    password: string,\n    rememberMe: boolean,\n    captcha: string\n    ): ThunkType => async (dispatch) => {\n    const response = await authApi.login(email, password, rememberMe, captcha)\n    if (response.resultCode === ResultCodes.Success) {\n        dispatch(getAuthUserData())\n    }\n    else {\n        if (response.resultCode === ResultCodeForCaptcha.CaptchaIsRequired) {\n            dispatch(getCaptchaUrl())\n        }\n        const message = response.messages.length > 0 ? response.messages[0] : \"Some error\";\n        dispatch(stopSubmit('login', { _error: message }));\n    }\n}\n\n\nexport const logout = (): ThunkType => async (dispatch) => {\n    const response = await authApi.logout()\n    if (response.resultCode === ResultCodes.Success) {\n        dispatch(actions.setAuthUserData(null, null, null, false))\n    }\n}\n\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\n    const response = await securityApi.getCaptchaUrl();\n    const captchaUrl = response.url;\n    dispatch(actions.getCaptchaUrlSuccess(captchaUrl))\n}\n\n\nexport default authReducer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Pagination_paginator__fFUsf\",\"pageNumber\":\"Pagination_pageNumber__3X4fH\",\"selectedPage\":\"Pagination_selectedPage__297tO\",\"btn_next\":\"Pagination_btn_next__23kn8\",\"btn_prev\":\"Pagination_btn_prev__25YCH\"};"],"sourceRoot":""}