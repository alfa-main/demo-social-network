{"version":3,"sources":["components/Common/FormControls/FormControls.module.css","utils/validator/validators.js","components/Common/FormControls/FormControls.js","Login/Login.js"],"names":["module","exports","requiredField","value","maxLengthCreator","maxLength","length","FormControl","Element","input","meta","props","child","hasError","touched","error","className","s","formControls","inp","LoginReduxForm","reduxForm","form","handleSubmit","onSubmit","type","placeholder","name","component","validate","formSummaryError","connect","state","isAuth","auth","login","to","formData","email","password","rememberMe"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,aAAe,mCAAmC,MAAQ,4BAA4B,iBAAmB,yC,iCCD3H,oEAAO,IAAMC,EAAgB,SAAAC,GACzB,IAAIA,EAEJ,MAAO,qBAIEC,EAAmB,SAACC,GAAD,OAAe,SAACF,GAE5C,GAAIA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,uHCNrBE,EAAc,SAAAC,GAAO,OAAI,YAAuC,IAApCC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,KAAgBC,GAAY,EAAtBC,MAAsB,yCAClEC,EAAWH,EAAKI,SAAWJ,EAAKK,MACtC,OACI,sBAAKC,UAAWC,IAAEC,aAAe,KAAOL,EAAWI,IAAEF,MAAQ,IAA7D,UACI,cAACP,EAAD,2BAAaC,GAAWE,IACvBE,GAAY,+BAAOH,EAAKK,c,iCCRrC,oGASMI,EAAMZ,YAAY,SAwBlBa,EAAiBC,YAAU,CAC7BC,KAAM,SADaD,EAtBL,SAAC,GAA6B,IAA3BE,EAA0B,EAA1BA,aAAcR,EAAY,EAAZA,MAC/B,OACI,uBAAMS,SAAUD,EAAhB,UACI,8BACI,cAAC,IAAD,CAAOE,KAAM,OAAQC,YAAa,QAASC,KAAM,QAASC,UAAWT,EAAKU,SAAU3B,QAExF,8BACI,cAAC,IAAD,CAAOuB,KAAM,WAAYC,YAAa,WAAYC,KAAM,WAAYC,UAAWT,EAAKU,SAAU3B,QAElG,gCACI,cAAC,IAAD,CAAOuB,KAAM,WAAYE,KAAM,aAAcC,UAAWT,IAD5D,kBAGCJ,GAAS,qBAAKC,UAAWC,IAAEa,iBAAlB,SACLf,IAEL,8BACI,oDAiCDgB,uBAJS,SAACC,GAAD,MAAY,CAChCC,OAAQD,EAAME,KAAKD,UAGiB,CAAEE,WAA3BJ,EAtBD,SAACpB,GAMX,OAAIA,EAAMsB,OACC,cAAC,IAAD,CAAUG,GAAI,aAIrB,gCACI,uCACA,cAAChB,EAAD,CAAgBI,SAXP,SAACa,GACd1B,EAAMwB,MAAME,EAASC,MAAOD,EAASE,SAAUF,EAASG","file":"static/js/6.67583431.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControls\":\"FormControls_formControls__3Zr3_\",\"error\":\"FormControls_error__1Z42I\",\"formSummaryError\":\"FormControls_formSummaryError__WuDVV\"};","export const requiredField = value => {\r\n    if (value) return undefined;\r\n\r\n    return 'Field is required';\r\n\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    // debugger\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n\r\n    return undefined;\r\n\r\n}","import React from 'react';\r\nimport s from './FormControls.module.css';\r\n\r\nexport const FormControl = Element => ({ input, meta, child, ...props }) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={s.formControls + ' ' + (hasError ? s.error : '')}>\r\n            <Element {...input} {...props} />\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { reduxForm, Field } from 'redux-form';\r\nimport { FormControl } from '../components/Common/FormControls/FormControls';\r\nimport { requiredField } from '../utils/validator/validators';\r\nimport { login } from '../redux/authReducer';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport s from '../components/Common/FormControls/FormControls.module.css';\r\n\r\nconst inp = FormControl('input')\r\n\r\nconst LoginForm = ({ handleSubmit, error }) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field type={\"text\"} placeholder={\"Email\"} name={\"email\"} component={inp} validate={requiredField} />\r\n            </div>\r\n            <div>\r\n                <Field type={\"password\"} placeholder={\"Password\"} name={\"password\"} component={inp} validate={requiredField} />\r\n            </div>\r\n            <div>\r\n                <Field type={\"checkbox\"} name={\"rememberMe\"} component={inp} /> remember me\r\n                </div>\r\n            {error && <div className={s.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <button>Log In</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm({\r\n    form: 'login'\r\n})(LoginForm)\r\n\r\n\r\nconst Login = (props) => {\r\n\r\n    const onSubmit = (formData) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe)\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={\"/profile\"} />\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmit} />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth,\r\n})\r\n\r\nexport default connect(mapStateToProps, { login })(Login);"],"sourceRoot":""}