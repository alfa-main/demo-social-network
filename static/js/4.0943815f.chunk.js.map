{"version":3,"sources":["components/Common/FormControls/FormControls.module.css","components/Common/FormControls/FormControls.js","utils/validator/validators.js","components/Profile/MyPosts/MyPosts.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.js","components/Profile/MyPosts/MyPosts.js","components/Profile/MyPosts/MyPostsContainer.js","components/Profile/ProfileInfo/ProfileStatusWithHooks.js","components/Profile/ProfileInfo/ProfileData/ProfileDataForm.js","components/Profile/ProfileInfo/ProfileData/ProfileData.js","components/Profile/ProfileInfo/ProfileInfo.js","components/Profile/Profile.js","components/Profile/ProfileContainer.js"],"names":["module","exports","FormControl","Element","input","meta","props","child","hasError","touched","error","className","s","formControls","requiredField","value","maxLengthCreator","maxLength","length","Post","post","message","likesCount","textarea","maxLength10","AddNewPostForm","React","memo","onSubmit","handleSubmit","Field","component","validate","name","placeholder","AddNewPostFormRedux","reduxForm","form","MyPosts","postsElements","posts","map","p","id","posts_block","values","addPost","newPostBody","MyPostsContainer","connect","state","profilePage","dispatch","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onChange","e","currentTarget","autoFocus","onBlur","updateStatus","defaultValue","onDoubleClick","ProfileDataFormReduxForm","profile","formStyles","formSummaryError","type","Object","keys","contacts","key","contact","Contact","contactTitle","contactValue","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","ProfileInfo","savePhoto","saveProfile","Preloader","content_img","src","alt","initialValues","formData","then","description_block","photos","large","userPhoto","target","files","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","Component","compose","auth","isAuth","withRouter","withAuthRedirect"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,aAAe,mCAAmC,MAAQ,4BAA4B,iBAAmB,yC,uHCE9GC,EAAc,SAAAC,GAAO,OAAI,YAAuC,IAApCC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,KAAgBC,GAAY,EAAtBC,MAAsB,yCAClEC,EAAWH,EAAKI,SAAWJ,EAAKK,MACtC,OACI,sBAAKC,UAAWC,IAAEC,aAAe,KAAOL,EAAWI,IAAEF,MAAQ,IAA7D,UACI,cAACP,EAAD,2BAAaC,GAAWE,IACvBE,GAAY,+BAAOH,EAAKK,c,iCCRrC,oEAAO,IAAMI,EAAgB,SAAAC,GACzB,IAAIA,EAEJ,MAAO,qBAIEC,EAAmB,SAACC,GAAD,OAAe,SAACF,GAE5C,GAAIA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,oBCRlCjB,EAAOC,QAAU,CAAC,MAAQ,uBAAuB,YAAc,+B,0CCA/DD,EAAOC,QAAU,CAAC,YAAc,iCAAiC,kBAAoB,uCAAuC,QAAU,+B,kMCWvHkB,EATF,SAACb,GACZ,OACE,sBAAKK,UAAWC,IAAEQ,KAAlB,UACGd,EAAMe,QACP,wCAFF,IAEqBf,EAAMgB,e,oCCAzBC,EAAWrB,YAAY,YACvBsB,EAAcR,YAAiB,IAwB/BS,EAAiBC,IAAMC,MAAK,SAACrB,GACjC,OACE,uBAAMsB,SAAUtB,EAAMuB,aAAtB,UACE,8BACE,cAACC,EAAA,EAAD,CAAOC,UAAWR,EAAUS,SAAU,CAAClB,IAAeU,GAAcS,KAAM,cAAeC,YAAa,sBAExG,8BACE,sDAMFC,EAAsBC,YAAU,CACpCC,KAAM,sBADoBD,CAEzBX,GAEYa,EAvCC,SAAChC,GAEf,IAAIiC,EAAgBjC,EAAMkC,MAAMC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAMrB,QAASqB,EAAErB,QAASC,WAAYoB,EAAEpB,YAAiBoB,EAAEC,OAMpG,OACE,qBAAKhC,UAAWC,IAAEgC,YAAlB,SACE,2CAEE,cAACT,EAAD,CAAqBP,SARV,SAACiB,GAChBvC,EAAMwC,QAAQD,EAAOE,gBAQjB,qBAAKpC,UAAWC,IAAE4B,MAAlB,SACGD,U,QCHIS,EAFUC,aAfH,SAACC,GACnB,MAAO,CACHV,MAAOU,EAAMC,YAAYX,UAKR,SAACY,GACtB,MAAO,CACHN,QAAS,SAACC,GACNK,EAASN,YAAQC,QAKJE,CAA6CX,G,kCCsBvDe,EAvCgB,SAAC/C,GAAW,IAAD,EAERgD,oBAAS,GAFD,mBAEjCC,EAFiC,KAEvBC,EAFuB,OAGZF,mBAAShD,EAAMmD,QAHH,mBAGjCA,EAHiC,KAGzBC,EAHyB,KAKtCC,qBAAU,WACND,EAAUpD,EAAMmD,UACjB,CAACnD,EAAMmD,SAeV,OACI,8BACMF,EAMI,8BACE,uBAAOK,SAbA,SAACC,GACpBH,EAAUG,EAAEC,cAAc/C,QAYmBgD,WAAW,EAAMC,OAlBvC,WACvBR,GAAY,GACZlD,EAAM2D,aAAaR,IAgBuES,aAAcT,MAN9F,8BACE,sBAAMU,cAjBG,WACrBX,GAAY,IAgBA,SACMlD,EAAMmD,OAAiBnD,EAAMmD,OAAd,a,4CCvBnCrD,EAAQF,YAAY,SACpBqB,EAAWrB,YAAY,YAsDdkE,EAJkBhC,YAAU,CACvCC,KAAM,eADuBD,EAhDT,SAAC,GAAsC,IAApCP,EAAmC,EAAnCA,aAAcwC,EAAqB,EAArBA,QAAS3D,EAAY,EAAZA,MAC9C,OACI,uBAAMkB,SAAUC,EAAhB,UACI,8BAAK,4CACJnB,GAAS,qBAAKC,UAAW2D,IAAWC,iBAA3B,SACL7D,IAEL,8CACe,cAACoB,EAAA,EAAD,CACP0C,KAAM,OACNzC,UAAW3B,EACX6B,KAAM,WACNC,YAAa,iBAErB,sDACuB,cAACJ,EAAA,EAAD,CACf0C,KAAM,WACNzC,UAAW3B,EACX6B,KAAM,iBACNC,YAAa,yBAErB,2DAC4B,cAACJ,EAAA,EAAD,CACpBC,UAAWR,EACXU,KAAM,4BACNC,YAAa,8BAErB,6CACc,cAACJ,EAAA,EAAD,CACNC,UAAWR,EACXU,KAAM,UACNC,YAAa,gBAErB,6CACeuC,OAAOC,KAAKL,EAAQM,UAAUlC,KAAI,SAAAmC,GACzC,OAAO,sBAAKjE,UAAWC,IAAEiE,QAAlB,UACFD,EADE,MACK,cAAC9C,EAAA,EAAD,CACJ0C,KAAM,OACNzC,UAAW3B,EACX6B,KAAM,YAAc2C,EACpB1C,YAAa0C,MALkBA,e,kBCdrDE,EAAU,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,aAAcC,EAAmB,EAAnBA,aAC7B,OACI,sBAAKrE,UAAWC,IAAEiE,QAAlB,UAA4BE,EAA5B,KAA4CC,MAIrCC,EAjCK,SAAC,GAAwC,IAAtCZ,EAAqC,EAArCA,QAASa,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,aACrC,OACI,gCACKD,GAAW,8BAAK,wBAAQE,QAASD,EAAjB,oBACjB,6CACed,EAAQgB,YAEvB,sDACwBhB,EAAQiB,eAAiB,MAAQ,QAExDjB,EAAQiB,gBACL,2DAC6BjB,EAAQkB,6BAGzC,6CACelB,EAAQmB,WAEvB,6CACef,OAAOC,KAAKL,EAAQM,UAAUlC,KAAI,SAAAmC,GACzC,OAAO,cAAC,EAAD,CAAmBG,aAAcH,EAAKI,aAAcX,EAAQM,SAASC,IAAvDA,aCmB1Ba,EAlCK,SAAC,GAAwE,IAAtEpB,EAAqE,EAArEA,QAASJ,EAA4D,EAA5DA,aAAcR,EAA8C,EAA9CA,OAAQyB,EAAsC,EAAtCA,QAASQ,EAA6B,EAA7BA,UAAWC,EAAkB,EAAlBA,YAAkB,EAC5DrC,oBAAS,GADmD,mBACrFC,EADqF,KAC3EC,EAD2E,KAG1F,IAAKa,EACH,OAAO,cAACuB,EAAA,EAAD,IAcT,OACE,gCACE,8BACE,qBAAKjF,UAAWC,IAAEiF,YAAaC,IAAI,yEAAyEC,IAAI,WAEjHxC,EAAW,cAAC,EAAD,CAAiByC,cAAe3B,EAASzC,SAVxC,SAACqE,GAChBN,EAAYM,GAAUC,MAAK,WACzB1C,GAAY,OAQ6Da,QAASA,IAChF,cAAC,EAAD,CAAaA,QAASA,EAASa,QAASA,EAASC,aAAc,WAAQ3B,GAAY,MACrF,sBAAK7C,UAAWC,IAAEuF,kBAAlB,UACE,qBAAKL,IAAKzB,EAAQ+B,OAAOC,OAASC,IAAWP,IAAI,UAChDb,GAAW,uBAAOV,KAAM,OAAQZ,SApBX,SAACC,GACvBA,EAAE0C,OAAOC,MAAMtF,QACjBwE,EAAU7B,EAAE0C,OAAOC,MAAM,OAmBvB,cAAC,EAAD,CAAwB/C,OAAQA,EAAQQ,aAAcA,WCvB/CwC,EATC,SAACnG,GACf,OACE,gCACE,cAAC,EAAD,CAAaqF,YAAarF,EAAMqF,YAAaD,UAAWpF,EAAMoF,UAAWR,QAAS5E,EAAM4E,QAASb,QAAS/D,EAAM+D,QAASZ,OAAQnD,EAAMmD,OAAQQ,aAAc3D,EAAM2D,eACnK,cAAC,EAAD,Q,uBCAAyC,E,oKAEF,WACI,IAAIC,EAASC,KAAKtG,MAAMuG,MAAMC,OAAOH,OAChCA,IACDA,EAASC,KAAKtG,MAAMyG,kBAGxBH,KAAKtG,MAAM0G,eAAeL,GAC1BC,KAAKtG,MAAM2G,UAAUN,K,+BAGzB,WACIC,KAAKM,mB,gCAGT,SAAmBC,EAAWC,EAAWC,GACjCT,KAAKtG,MAAMuG,MAAMC,OAAOH,SAAWQ,EAAUN,MAAMC,OAAOH,QAC1DC,KAAKM,mB,oBAIb,WACI,OACI,cAAC,EAAD,2BAAaN,KAAKtG,OAAlB,IACI4E,SAAU0B,KAAKtG,MAAMuG,MAAMC,OAAOH,OAClCtC,QAASuC,KAAKtG,MAAM+D,QACpBZ,OAAQmD,KAAKtG,MAAMmD,OACnBQ,aAAc2C,KAAKtG,MAAM2D,aACzByB,UAAWkB,KAAKtG,MAAMoF,iB,GA7BPhE,IAAM4F,WAyCtBC,sBACXtE,aARkB,SAACC,GAAD,MAAY,CAC9BmB,QAASnB,EAAMC,YAAYkB,QAC3BZ,OAAQP,EAAMC,YAAYM,OAC1BsD,iBAAkB7D,EAAMsE,KAAKb,OAC7Bc,OAAQvE,EAAMsE,KAAKC,UAIM,CAAET,mBAAgBC,cAAWhD,iBAAcyB,cAAWC,kBAC/E+B,IACAC,IAHWJ,CAIbb","file":"static/js/4.0943815f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControls\":\"FormControls_formControls__3Zr3_\",\"error\":\"FormControls_error__1Z42I\",\"formSummaryError\":\"FormControls_formSummaryError__WuDVV\"};","import React from 'react';\r\nimport s from './FormControls.module.css';\r\n\r\nexport const FormControl = Element => ({ input, meta, child, ...props }) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={s.formControls + ' ' + (hasError ? s.error : '')}>\r\n            <Element {...input} {...props} />\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}","export const requiredField = value => {\r\n    if (value) return undefined;\r\n\r\n    return 'Field is required';\r\n\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    // debugger\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n\r\n    return undefined;\r\n\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"MyPosts_posts__1Bi33\",\"posts_block\":\"MyPosts_posts_block__162SU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content_img\":\"ProfileInfo_content_img__27aIn\",\"description_block\":\"ProfileInfo_description_block__ye2ih\",\"contact\":\"ProfileInfo_contact__KBWJl\"};","import React from 'react';\nimport s from './Post.module.css';\n\nconst Post = (props) => {\n  return (\n    <div className={s.post}>\n      {props.message}\n      <span>like</span> {props.likesCount}\n    </div>\n  );\n}\n\nexport default Post;\n\n","import React from 'react';\nimport s from './MyPosts.module.css';\nimport Post from './Post/Post';\nimport { reduxForm, Field } from 'redux-form';\nimport { requiredField, maxLengthCreator } from '../../../utils/validator/validators';\nimport { FormControl } from '../../Common/FormControls/FormControls';\n\nconst textarea = FormControl('textarea');\nconst maxLength10 = maxLengthCreator(10);\n\nconst MyPosts = (props) => {\n\n  let postsElements = props.posts.map(p => <Post message={p.message} likesCount={p.likesCount} key={p.id} />);\n\n  let addNewPost = (values) => {\n    props.addPost(values.newPostBody);\n  }\n\n  return (\n    <div className={s.posts_block}>\n      <div>\n        My posts\n        <AddNewPostFormRedux onSubmit={addNewPost} />\n        <div className={s.posts}>\n          {postsElements}\n        </div>\n      </div>\n    </div>\n  );\n}\n\n\nconst AddNewPostForm = React.memo((props) => {\n  return (\n    <form onSubmit={props.handleSubmit}>\n      <div>\n        <Field component={textarea} validate={[requiredField, maxLength10]} name={\"newPostBody\"} placeholder={\"Enter your Post\"} />\n      </div>\n      <div>\n        <button>Add post</button>\n      </div>\n    </form>\n  )\n})\n\nconst AddNewPostFormRedux = reduxForm({\n  form: \"profileAddPostForm\"\n})(AddNewPostForm);\n\nexport default MyPosts;\n","import { addPost } from '../../../redux/profileReducer';\r\nimport MyPosts from './MyPosts';\r\nimport { connect } from 'react-redux';\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPostBody) => {\r\n            dispatch(addPost(newPostBody))\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React, { useState, useEffect } from 'react';\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status]);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode\r\n                ? <div>\r\n                    <span onDoubleClick={activateEditMode}>\r\n                        {!props.status ? \"---\" : props.status}\r\n                    </span>\r\n                </div>\r\n                : <div>\r\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode} defaultValue={status} />\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default ProfileStatusWithHooks;","import React from 'react';\r\nimport s from './ProfileDataForm.module.css';\r\nimport { reduxForm, Field } from 'redux-form';\r\nimport { FormControl } from '../../../Common/FormControls/FormControls';\r\nimport formStyles from '../../../Common/FormControls/FormControls.module.css';\r\n\r\nconst input = FormControl('input');\r\nconst textarea = FormControl('textarea');\r\n\r\nconst ProfileDataForm = ({ handleSubmit, profile, error }) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div><button>Save</button></div>\r\n            {error && <div className={formStyles.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                Full name: <Field\r\n                    type={'text'}\r\n                    component={input}\r\n                    name={\"fullName\"}\r\n                    placeholder={\"Full name\"} />\r\n            </div>\r\n            <div>\r\n                Looking for a job: <Field\r\n                    type={'checkbox'}\r\n                    component={input}\r\n                    name={\"lookingForAJob\"}\r\n                    placeholder={\"looking for a job\"} />\r\n            </div>\r\n            <div>\r\n                My professional skills: <Field\r\n                    component={textarea}\r\n                    name={\"lookingForAJobDescription\"}\r\n                    placeholder={\"My professional skills\"} />\r\n            </div>\r\n            <div>\r\n                About me: <Field\r\n                    component={textarea}\r\n                    name={\"aboutMe\"}\r\n                    placeholder={\"About me\"} />\r\n            </div>\r\n            <div>\r\n                Contacts: {Object.keys(profile.contacts).map(key => {\r\n                    return <div className={s.contact} key={key}>\r\n                        {key}:  <Field\r\n                            type={'text'}\r\n                            component={input}\r\n                            name={\"contacts.\" + key}\r\n                            placeholder={key} />\r\n                    </div>\r\n                })}\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm({\r\n    form: \"editProfile\"\r\n})(ProfileDataForm);\r\n\r\nexport default ProfileDataFormReduxForm;","import React from 'react';\r\nimport s from './ProfileData.module.css';\r\n\r\nconst ProfileData = ({ profile, isOwner, goToEditMode }) => {\r\n    return (\r\n        <div>\r\n            {isOwner && <div><button onClick={goToEditMode}>Edit</button></div>}\r\n            <div>\r\n                Fullname: {profile.fullName}\r\n            </div>\r\n            <div>\r\n                Looking for a job: {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n            </div>\r\n            {profile.lookingForAJob &&\r\n                <div>\r\n                    My professional skills: {profile.lookingForAJobDescription}\r\n                </div>\r\n            }\r\n            <div>\r\n                About me: {profile.aboutMe}\r\n            </div>\r\n            <div>\r\n                Contacts: {Object.keys(profile.contacts).map(key => {\r\n                    return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]} />\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Contact = ({ contactTitle, contactValue }) => {\r\n    return (\r\n        <div className={s.contact}>{contactTitle}: {contactValue}</div>\r\n    )\r\n}\r\n\r\nexport default ProfileData;","import React, { useState } from 'react';\nimport s from './ProfileInfo.module.css';\nimport Preloader from '../../Common/Preloader/Preloader';\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\nimport userPhoto from '../../../assets/img/images.png';\nimport ProfileDataForm from './ProfileData/ProfileDataForm';\nimport ProfileData from './ProfileData/ProfileData';\n\nconst ProfileInfo = ({ profile, updateStatus, status, isOwner, savePhoto, saveProfile }) => {\n  let [editMode, setEditMode] = useState(false);\n\n  if (!profile) {\n    return <Preloader />\n  }\n\n  const onMainPhotoSelected = (e) => {\n    if (e.target.files.length) {\n      savePhoto(e.target.files[0]);\n    }\n  }\n\n  const onSubmit = (formData) => {\n    saveProfile(formData).then(() => {\n      setEditMode(false);\n    });\n  }\n  return (\n    <div>\n      <div>\n        <img className={s.content_img} src=\"https://bipbap.ru/wp-content/uploads/2017/04/0_7c779_5df17311_orig.jpg\" alt=\"icon\" />\n      </div>\n      {editMode ? <ProfileDataForm initialValues={profile} onSubmit={onSubmit} profile={profile} /> :\n        <ProfileData profile={profile} isOwner={isOwner} goToEditMode={() => { setEditMode(true) }} />}\n      <div className={s.description_block}>\n        <img src={profile.photos.large || userPhoto} alt='large' />\n        {isOwner && <input type={\"file\"} onChange={onMainPhotoSelected} />}\n        <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\n      </div>\n    </div>\n  );\n}\n\nexport default ProfileInfo;\n","import React from 'react';\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\n\nconst Profile = (props) => {\n  return (\n    <div>\n      <ProfileInfo saveProfile={props.saveProfile} savePhoto={props.savePhoto} isOwner={props.isOwner} profile={props.profile} status={props.status} updateStatus={props.updateStatus} />\n      <MyPostsContainer />\n    </div>\n  );\n}\n\nexport default Profile;\n","import React from 'react';\r\nimport Profile from './Profile';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { compose } from 'redux';\r\nimport { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile } from '../../redux/profileReducer';\r\nimport { withAuthRedirect } from '../../hoc/AuthRedirect';\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n        }\r\n\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                isOwner={!this.props.match.params.userId}\r\n                profile={this.props.profile}\r\n                status={this.props.status}\r\n                updateStatus={this.props.updateStatus}\r\n                savePhoto={this.props.savePhoto} />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile }),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer);\r\n"],"sourceRoot":""}